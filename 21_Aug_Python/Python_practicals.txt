Write a program to remove all items from a list that are less then 5 e.g [12,3,4,5,67,0] output [12,5,67]

Write a program to find common among 2 lists. eg. lst_numbers = [1,2,34,33,21] lst_numbers2=[11,2,33,45] output [2,33]

Write a program to sort a list of strings by their length e.g ['apple', 'banana', 'kiwi', 'orange'] output : ['kiwi', 'apple', 'orange', 'banana']

Write a program to accepts a list of integers and returns a tuple with the sum of all positive numbers and the sum of all negative numbers

Write a program that takes a list of numbers and returns a tuple containing the sum and product of all the numbers.
- Input: `[1, 2, 3, 4]`
- Output: `(10, 24)`



Accept a string from the user and print it in uppercase if the length of the string is greater than 5, else print it in lowercase using a function.

Write a function that accepts a string and returns the string in alternating uppercase and lowercase characters.

Write a function that accepts a list of numbers and returns the average of the numbers, excluding any zero values

Write a function that accepts a string and returns True if the string is a valid email address (contains "@" and "."), otherwise False.

Write a function that accepts a list of integers and returns the second largest number in the list.

Write a Python program that uses `map()` to convert a list of strings to uppercase. Input: `['apple', 'banana', 'cherry']` - Output: `['APPLE', 'BANANA', 'CHERRY']`

Write a Python program that uses `map()` to apply a function that converts a list of temperature values in Celsius to Fahrenheit. Input: `[0, 25, 100]` Output: `[32.0, 77.0, 212.0]`

Dictionary :

    "Count frequency of list items and write in into dictionary :input List1 = [1, 2, 2, 3, 4, 1, 4, 5, 5, 6, 7, 7]
    output : {1: 2, 2: 2, 3: 1, 4: 2, 5: 2, 6: 1, 7: 2}"

    "Find the total income from sales, considering only items that sold more than 100 units sales_data = [
    {""product"": ""Pen"", ""price"": 10, ""units_sold"": 150},
    {""product"": ""Notebook"", ""price"": 50, ""units_sold"": 90},
    {""product"": ""Pencil"", ""price"": 5, ""units_sold"": 300},
    ]"

    "Write a prgram to extract unique values from List in dictionary (With Dict/Set comprehension) input dict_city_list = {'cityList1': ['Ahmedabad','Baroda', 'Bhopal', 'Mumbai'], 
      'cityList2': ['Baroda', 'Mumbai','Delhi', 'Chochi'], 
      'cityList3': [""Bhopal"",""Banglore"", ""Pune"", ""Mumbai""], 
      'cityList4': [""Delhi"",""Ahmedabad"", ""Pune"",""Chochi""]}
    Output {'Banglore', 'Delhi', 'Pune', 'Ahmedabad', 'Mumbai', 'Bhopal', 'Baroda', 'Chochi'}
    "


    "Filter active adults and get their names in uppercase
    users = [
    {""name"": ""Alice"", ""age"": 25, ""active"": True},
    {""name"": ""Bob"", ""age"": 17, ""active"": False},
    {""name"": ""Charlie"", ""age"": 35, ""active"": True}
    ]"


    "Write a program to create a dictionary having data like {
    Ahemdabad : ((""Ambawadi"", 380006) ,(""Bodakdev"",380054),(""Gandhi Ashram"",380027)),
    Mumbai : ((""Mandvi"",400003),(""Mumbai Central"",400008),(""Worli"",400018))
    } 

    output If user enters Mumbai : then output is area Mandvi -->400003 , Mumbai Central --> 400008, Worli-->400018
    if user enter 400018 then output  Worli , Mumbai
    if user enters Mandvi then output is pin code is 400003 and it's in Mumbai"

Lambda : 
    find a list with maximum and minimum length using lambda.
    Python program to sort a list of tuples using Lambda.
    Fibonacci series up to n using Lambda
    Rearrange positive and negative numbers in a given array using Lambda. (Use sorted function)

Function 

   -  Write a function that accepts a list of numbers and returns the average of the numbers.
 - Accept a string from the user and print it in uppercase if the length of the string is greater than 5, else print it in lowercase using a function.
 - Write a function that accepts a list of numbers and returns a new list with only the numbers that are divisible by 3.
- Write a function that accepts a list of numbers and returns a new list with the squares of all the numbers in the list.
- Write a function that accepts a string and counts how many vowels are in the string.
- Write a function that accepts a list of strings and returns the longest string in the list.
- Write a function that accepts a number and checks if it is an Armstrong number.
- Write a function that accepts a number and returns the sum of its digits.
- Write a function that accepts a string and returns the string in alternating uppercase and lowercase characters.
- Write a function that accepts a list of strings and returns a new list with only the strings that have an odd length.
- Write a function that accepts a string and a substring, and returns True if the substring is found in the string, otherwise False.
- Write a function that accepts a list of numbers and returns a new list with all the numbers that are divisible by both 2 and 3.
- Write a function that accepts a string and returns True if the string is a valid email address (contains "@" and "."), otherwise False.
- Write a function that accepts a list of integers and returns the second largest number in the list.
- Write a function that accepts a list of numbers and returns the average of the numbers, excluding any zero values
- Write a function that accepts two strings and returns the common characters between them
- Write a function count_character(string, char) that accepts a string and a character, and returns the number of times the character appears in the string.
- Write a function concatenate_with_separator(lst, separator) that accepts a list of strings and a separator string, then returns a new string where all elements of the list are joined using the separator.
- Write a function merge_dicts(dict1, dict2) that accepts two dictionaries and returns a single dictionary that contains the merged key-value pairs from both dictionaries.
- Write a function longest_word(sentence) that accepts a sentence and returns the longest word in the sentence.
- Write a function create_frequency_dict(lst) that accepts a list and returns a dictionary where the keys are the elements of the list, and the values are the count of how often each element appears.
- Write a function merge_lists_into_dict(list1, list2) that accepts two lists of equal length and merges them into a dictionary where the keys are the indices (0 to n-1) and the values are the elements from both lists.


OOP

create a class called "Book" with attributes for title, author, and ISBN, and methods to display book details.


Write a program to create a class called "Employee" with a name, salary, and hire date attributes, and a method to calculate years of service.


Write a program to create a class called "Reservation" with attributes for reservation ID, customer name, and date. Create subclasses "ResortReservation" and "RailwayReservation" that add specific attributes like room number for hotels and seat number for flights. Implement methods to check reservation status and modify reservation details.


Write a python program to add two distances using class and object concepts (km,m) (Use Operator Oveloading)


Write a python program to manage a phone store (mobile shop) record using class
Phone (brand, model, price) and PhoneInventory(add_phone,find_phone,remove_phone,display_phone) class
1. Add Phone to Inventory
2. Remove Phone from Inventory
3. Find Phone in Inventory
4. Display Inventory
5. Quit


