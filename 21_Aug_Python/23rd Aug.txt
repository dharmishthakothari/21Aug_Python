function - to perform specific task

2 types 
1. user defined  - we will create
2. in built - python

print()
input()
format()
upper()
lower()
startswith()
extend()


functions - name , parameter ,return type

name - print
paramter - 
return - output

print(sep,end)

sep = seperator
end = endswith

Comments  ---> Non exevcutable part of program 
		for documentation purpose
		
	
input  --> to accept input from user


____________________________________________

26th Aug

installation - python
		vs code - extension python 
		
	
print 
input 

functions - it is set stmt/instructions for specific task

print
input
format
split

in-built and user defined 
1. in build - already thr print,input,split
2. user defined - user created function 

print("Hello")
print("Hello Bhargavi ")
print("This is python class")

parameters print function
sep , end

-->    data type - which kind of data is there it is specified by data type
-->    Variable  - it is store values 

example of c/c++
int c_no=7775755;
string name="dharmishtha"

python
c_no = 7775989;  
name="dhamrmishtha"

variable c_no,name
values = 7775989 , "dharmishtha"

python data types 

numeric , string ,seq ,map


Lab task = take 3 different varaibles of float,int,string and print type

input = to accept input from user

input function return string 

program 


Enter number 1  = 20
Enter number 2  = 30

addition =  50

type conversion  - str to int
int()
float

practise - print with end - sep
input
type
conversion








type--> 

28th Aug

Python fetures 
PEP 
Operator

escape sequnces 

newline 

\n
\t tab
\b backspace
name = "Tops technologies"
print(name)

Tops technologies

Tops "technologies"


1 name="Tops\tTechnologies"
2 name="Tops\bTechnologies"
3. print("tops","technogies",sep="\n")
4. print("tops","technogies",sep="\t")
5. print("tops technogies",end="\n")
6. print("tops technogies",end="\t")


block of stmt
{
}

indentation 
block - indetation 

naming  convenstion -  rules for naming

lst_
tpl_
city
num1
num2
float_num
a=34.64564
class Employee
class Shape
class Car

print()

comment  -  documentation purpose
	   non executable part 
	single line
	multiple line

reserve work / keyword 

predefined word 

if ,True,for 

Type conversion == convert from one data type to anothor 

number=input("Enter number ")
print(type(number)) - class str

# to convert number into int
number1=int(number)

# to convert number into float
num2=float(number)

list
set

__________
split
formate

2nd Sep 

Type conversion 
predefined word

block of stmts
comments 
naming convesions
escape sequences 

PEP 8 

Rules / syntax
block stmt 
for
    stmt

variables name
- digits 
- lphabet-_
- case sensitive


Operators

	1. Arithmatic
	2. Logical
	3. Assignment
	4. identity
	5. membership
	6. relational 


1. Arithmatic 
	calculation + , - , * , / , 
	// (floor division) , ** (exponent) , 
	%  (modules / reminder  )
	10/2 = 5
	10/3 = 3.31
	10%3 = 1
	10%2 = 0
	
	5**2 = 25
	5**3 = 125


	

lab task 
"Hello" ** 5

format - .format	
f

addition of 100 and 10 is 110

palceholder  - {}

assignment - value assign 
a=5
a=100
number1=90

-->number1=90+10

--> number1=number1+10

--> number1+=10

Lab task - %= , //= , **/

--> comparison operator 

>
<
>=
<=
==
!=


logical 

and or not 


4th Sep
Operators - 
		Arithmatic - +,-,/,*,//,**,%
		Assignment  +=,*=,-....
		comparison  ==,>=,<=,!=
		Logical and or not (compound)	

		num=120 num2=60
		num>100 and num>num2 - both condition must be true 
		120>100 and 120>60  - True
	
		num=50 num2 10
		50>100 and 50>10 - False	

		num>100 or num>num2 - either of condition is true it return tru
		120>100 or 120>60  - True

		num=50 num2 10
		50>100 or 50>10 - True

		membership operator
			in not it

		identity is nested list 
		lst1 = [1,2,3,[2,3,4]]		
		lst2 [2,3,4]
		
		 list with list type / value
			== value
		
		
		Conditional stmts ?
		options/alternatives 
		
		if stmt
		if-elif
		if-elif-else
		
		if condtion:
		    block

		number=1
		if number>0:
			print("No is positive")

		
		multiple conditions 
		age 0-2 infant
		3-18 minor
		19-50 adult
		50 > seniur 

	Lab task 
		user accept Marks
		Marks >70 Grade 'A'
		marks 69 - 50 B
		marks 49 - 35 C
				Fail

6th Sep

match case multiple conditions 
if condiotn
elif
elif
elif

match exp:
	case :	stmt

-- > nested if	
condition within another condition

if condtion:
  if condition:



age must be greater then 18
	weight 55 more


output - secnario1-  can not donate blood due to underweight
	
senario 2 - can not donate blood due to age

loops

iteration /repeation 

2 for 
while

for var in range/seq
	var
---	range(start,end,incre/dec)
	start=0
	end=
	incr=1

to print 5 times hello

for vishwraj in range(5):
	print("Hello")


print even 
start value and end value ask from user

sum of number 1-10
1+2+3+4...10= 55

sum=0
for i in range(1,11):
   sum=sum+i

1st iteration sum=0+1 =1
2nd iteration sum=1+2 =3
3rd iteration sum=3+3 = 6
4th iteration sum=6+4 = 10

user input =5
1*2*3*4*5 = 120

Lab task 

start and end range ask from user and sum_of_even and sum_of_odd numbers 
don't use increment/decrement

start 100
end 150

sum_of_even=100+102+104+106....
odd=101+103+...149




   

	

		
		


	






 










 
















	








