function - to perform specific task

2 types 
1. user defined  - we will create
2. in built - python

print()
input()
format()
upper()
lower()
startswith()
extend()


functions - name , parameter ,return type

name - print
paramter - 
return - output

print(sep,end)

sep = seperator
end = endswith

Comments  ---> Non exevcutable part of program 
		for documentation purpose
		
	
input  --> to accept input from user


____________________________________________

26th Aug

installation - python
		vs code - extension python 
		
	
print 
input 

functions - it is set stmt/instructions for specific task

print
input
format
split

in-built and user defined 
1. in build - already thr print,input,split
2. user defined - user created function 

print("Hello")
print("Hello Bhargavi ")
print("This is python class")

parameters print function
sep , end

-->    data type - which kind of data is there it is specified by data type
-->    Variable  - it is store values 

example of c/c++
int c_no=7775755;
string name="dharmishtha"

python
c_no = 7775989;  
name="dhamrmishtha"

variable c_no,name
values = 7775989 , "dharmishtha"

python data types 

numeric , string ,seq ,map


Lab task = take 3 different varaibles of float,int,string and print type

input = to accept input from user

input function return string 

program 


Enter number 1  = 20
Enter number 2  = 30

addition =  50

type conversion  - str to int
int()
float

practise - print with end - sep
input
type
conversion








type--> 

28th Aug

Python fetures 
PEP 
Operator

escape sequnces 

newline 

\n
\t tab
\b backspace
name = "Tops technologies"
print(name)

Tops technologies

Tops "technologies"


1 name="Tops\tTechnologies"
2 name="Tops\bTechnologies"
3. print("tops","technogies",sep="\n")
4. print("tops","technogies",sep="\t")
5. print("tops technogies",end="\n")
6. print("tops technogies",end="\t")


block of stmt
{
}

indentation 
block - indetation 

naming  convenstion -  rules for naming

lst_
tpl_
city
num1
num2
float_num
a=34.64564
class Employee
class Shape
class Car

print()

comment  -  documentation purpose
	   non executable part 
	single line
	multiple line

reserve work / keyword 

predefined word 

if ,True,for 

Type conversion == convert from one data type to anothor 

number=input("Enter number ")
print(type(number)) - class str

# to convert number into int
number1=int(number)

# to convert number into float
num2=float(number)

list
set

__________
split
formate

2nd Sep 

Type conversion 
predefined word

block of stmts
comments 
naming convesions
escape sequences 

PEP 8 

Rules / syntax
block stmt 
for
    stmt

variables name
- digits 
- lphabet-_
- case sensitive


Operators

	1. Arithmatic
	2. Logical
	3. Assignment
	4. identity
	5. membership
	6. relational 


1. Arithmatic 
	calculation + , - , * , / , 
	// (floor division) , ** (exponent) , 
	%  (modules / reminder  )
	10/2 = 5
	10/3 = 3.31
	10%3 = 1
	10%2 = 0
	
	5**2 = 25
	5**3 = 125


	

lab task 
"Hello" ** 5

format - .format	
f

addition of 100 and 10 is 110

palceholder  - {}

assignment - value assign 
a=5
a=100
number1=90

-->number1=90+10

--> number1=number1+10

--> number1+=10

Lab task - %= , //= , **/

--> comparison operator 

>
<
>=
<=
==
!=


logical 

and or not 


4th Sep
Operators - 
		Arithmatic - +,-,/,*,//,**,%
		Assignment  +=,*=,-....
		comparison  ==,>=,<=,!=
		Logical and or not (compound)	

		num=120 num2=60
		num>100 and num>num2 - both condition must be true 
		120>100 and 120>60  - True
	
		num=50 num2 10
		50>100 and 50>10 - False	

		num>100 or num>num2 - either of condition is true it return tru
		120>100 or 120>60  - True

		num=50 num2 10
		50>100 or 50>10 - True

		membership operator
			in not it

		identity is nested list 
		lst1 = [1,2,3,[2,3,4]]		
		lst2 [2,3,4]
		
		 list with list type / value
			== value
		
		
		Conditional stmts ?
		options/alternatives 
		
		if stmt
		if-elif
		if-elif-else
		
		if condtion:
		    block

		number=1
		if number>0:
			print("No is positive")

		
		multiple conditions 
		age 0-2 infant
		3-18 minor
		19-50 adult
		50 > seniur 

	Lab task 
		user accept Marks
		Marks >70 Grade 'A'
		marks 69 - 50 B
		marks 49 - 35 C
				Fail

6th Sep

match case multiple conditions 
if condiotn
elif
elif
elif

match exp:
	case :	stmt

-- > nested if	
condition within another condition

if condtion:
  if condition:



age must be greater then 18
	weight 55 more


output - secnario1-  can not donate blood due to underweight
	
senario 2 - can not donate blood due to age

loops

iteration /repeation 

2 for 
while

for var in range/seq
	var
---	range(start,end,incre/dec)
	start=0
	end=
	incr=1

to print 5 times hello

for vishwraj in range(5):
	print("Hello")


print even 
start value and end value ask from user

sum of number 1-10
1+2+3+4...10= 55

sum=0
for i in range(1,11):
   sum=sum+i

1st iteration sum=0+1 =1
2nd iteration sum=1+2 =3
3rd iteration sum=3+3 = 6
4th iteration sum=6+4 = 10

user input =5
1*2*3*4*5 = 120

Lab task 

start and end range ask from user and sum_of_even and sum_of_odd numbers 
don't use increment/decrement

start 100
end 150

sum_of_even=100+102+104+106....
odd=101+103+...149

9th Sep

loops / 
    repetation

1. for 
2. while

1 - 10 print

for i in range(1,11):
    print(i)


num=5

5*1=5
5*2=10
5*3=15
....

5*10=50



lst_no=[1,23,34,55]


for i in range(1,11):
   sum+=i

for i in lst_no:
   sum+=i

Lab task : add elements of list 


while loop?
    when we are not known no of interation in advance at that time we have to use while loop

Lab task :factorial number - while loops

			multlication table using while
			multlication table using while - in reverse 

prime no ? no is divisable by 1 and itself 

23 
11
7

Prime with while loop

find prime numbers from 1-100 -any loop

find no of digits - 34324  = 5
 9078 = 4

logic 

34324/10  = 3432 
4 ? 34324%10 = 4

___________________________

			
34324 % 10 = 4
34324/10 = 3432

3432 % 10 = 2
3432/10 = 343

343%10 


11th Sep


armstrong no :-   digits sum and multilication same perfect no 

	153 = 3

    1^3 + 5^3 + 3^3 = 1+125+27  = 153

2331 = 4
2^4 + 3^4 +3^4 + 1^4 = 16+81+81+1 = 
	

		condition 
1. find no of digits 
2. no ko digits se 
3. digits power  **
4. sum
5. conidition sum==num v
		
Lab task  : palindrome num and reversde 

num=1234
rev = 4321 not

num = 1221
rev =1221 palidrome


fibo series --- 0 1 1 2 3 5 8 13 21 34 55 ....

1 iteration prev = 0
			next=1
			sum=prev+next

2 iteration 
			prev =next (1)
			next =sum (1)
			sum = prev+next  (2)

3 iteration 
		prev = next (1)
		next =sum (2)
		sumn = prev+next (3)

4 iteration 
		prev = next (2)
		next = sum(3)
		sum = prev+sum (5)

	


sum  
next
pre

lab task -- swap numbers 

num1 = 12
num2 =22

num2 =12
num1=22


temp = num1   ( temp =12
num1=num2    ( num1 = 22)
num2=temp    (num2 = 12)

num1 , num2 = num2 , num1

*
*  *
*  *  *
*  *  *  *


i=0 ,j=0 *
i=0 

for i in range(5):
   print("*")

i=0 j=0*
i=1 j=0 j=1 *  *
i=2 j=0 j=1 j =2 *  *  *
*  *  *  *




1
1 2
1 2 3
1 2 3 4
1 2 3 4 5

1
2 2
3 3 3
4 4 4 4


Lab task * * * * *
         * * * *
         * * *
         * *
         *

	
16th Sep

1
3	3
5	5	5
7	7	7	7
9	9	9	9	9

break  - break loop 
       
continue - perticular condition pe current iteration skip and will continue with next iteration

pass - nothing /placeholder


String ---- sequence of characters , name , 
"Enter your name "
"Dharmihstha"
"123456" - string
123456 - number
'Vishwaraj' - string
'Visharaj909090' ---string

 in built functions ---- () - already library ,we have to use /call 
keywords - break , continue,if,elif,for , while ,pass 

lower
upper
title
capitalize
find
count
replace


c_name = "Tops Technologies"
T = 0
o = 1
p = 2
s = 3
 =  4
T = 5
e = 6
c = 7
h = 8
n = 9

sentence = "cat is animal and dog is animal"


access method
string variable.method


str1 = "Tops"
str2 = "12345"
str3 = "Tops@123"
str4 ="Tops tech"


isdigit , isaplha , isalnum 

print  


lab task --- accept 5 string user and
			perform all 4 operations/methods
			maintain ormatting



String methods 

	access string
	string slicing
	string indexing

 Check email address is valid or not
	input - "test@gmail.com"
	output - test@gmail.com is valid email address

	input - "test@gmail123"
	output - test@gmail123 is invalid email address

	indexing ? position 
	T	0
	o	1	
	p	2

	str[8] -- []--index no
	-tive letters are from reverse 
	
	len- to find length of string
	user input string access index 

	string contains vowel or not
	
Lab task - print letters of string from reverse (thru index)
	input - Abhijit
	output - tijihbA

	print(end="")

	slicing --- part/portion 
	str[1:4] (1,2,3)
	str[1:10] (1,2,3,4,5,6,7,8,9)

	str[start:end:step]

23rd  Sep
	
	String --> Slicing 
		indexing
		access
		in build methods
		
	Abhijit --> jitiAbhi
	Ravi	--> viRa
	

Abhijit ---> tbhijiA
Ravi ---> iavR
Bharagvi  ---> iharagvB
	



Menu driven program
armstrong
number gussing - random

25th Sep : 
 1. Convert into Uppercase
 2. Convert into Lowercase
 3. Find length
 4. Replace 
 5. Exit
Please enter your choice : 1
Please enter string that you want otconvert in Uppercase
qwert
QWERT

 1. Convert into Uppercase
 2. Convert into Lowercase
 3. Find length
 4. Replace 
 5. Exit
Please enter your choice : 3
Please enter string 
"qwerty tyu"
Length of string is 10

 1. Convert into Uppercase
 2. Convert into Lowercase
 3. Find length
 4. Replace 
 5. Exit
Please enter your choice : 5


Lab task : 



 1. Reverse of Number
 2. Find no of digits
 3. Count total even/odd digits from number
 4. check number is palindrom 
 5. Exit
Please enter your choice : 5

RANDOM --- 

Number gussing game ....

randome_num = 23

Guess number = 90


Collection  (string,list,set,tuple,dictionary)

string is ordered
			



List --- store set of values 
---collection of items ,elements 
     ordered 
	 mutable / change

string,int,float

list in build methods 
list indexing
list slicing


27th Sep
	list methods  - insert , extends , pop

copy - changes in orginal observ output to copied list 
= - changes in orginal observ output to copied list 

lst1 = ['ahmebabad','Baroda','baroda','surat','baroda']
   each city count 

append
insert
index
clear
copy
count
extend
del 
pop
sort
reverse

 30th Sep  --- 
    list methods 
	list indexing and slicing 


--- > Convert names into upper case from list 
--> Find length of each string from list
--> Find largest string from list
--->create valid email id list from exsting list e.g lst=['test@gmail.com','test.com','qwett@gmail.com','fdgdfggmail.com']
    output --- valid_email_lst = ['test@gmail.com','qwett@gmail.com']

-->lst_number second higest num lst=[11,23,32,9,23]
23   ?
sort index 
not inbuilt 
logic if-else
-->find no of vowels in string from list 
input ['test','testa','tst']
output [1,2,0]

Tuple ---

list vs tuple
immutable 
performance 
() a=(1,2,3)
a = 1,2,3  --tuple 

a = [1,2,3]
t=tuple(a)
t=(1,2,3)

List comprehensive --- short form , consice way , more readable form 
lst1 lst2 add 
for i in lst1:
	lst2.append(i)

lst2=[i for i in lst1]
print(lst2)

List -- Ordered , muttable , dublicate 
Tuple -- imutable ,orderd , dublicate , permance wise its better then list
Set -- not allowed dublicate items  , special methods (intersection , union ,difrence 
Dictionary  - ordered , key - paired , mutable , key is unquie 

shallow copy / deep copy --- find diffrence 

7th Oct 

	Set - methods - intersection ,union ,diffrence ....
			slicing 

set_sub = {'Python','Java','SE'}
		want to access last elements 
print(set_sub[1:])
set_sub[0]=Python
[1]=java
[2]=SE

# -ve index

min , max ,sum 
Dictionary ---- word - meaning 
				Good -  better,best 
				map (location , address
				Tops - near parimal , odd cg road

				key and value paired 
				key must be unique  , value may be dublicate 
				{}
				{key:value , key:value , key:value}

				methods  - values , keys ,item ,setdefault ,  get
						iterate 
						1 --- >Ahemdabad
						2---> Baroda
						3 --->  
				
Lab task -->Practise dictionary 

dict1 = {101 : ['Dhruv','Parimal',90,80,70],
         102 : ['Romil','C G Road' , 90,80,77],
         205 : ['Dhruti' , 'Bhanagar' , 90,83,71],
         207 : ['Dharmishtha' , 'Parimal' , 92,67,72]
         }

output fing grade 
ans= ('dhruv',240),('Roamil',247),(),()

				slicing
				indexing 


9th OCt

1. What is variable & What is data type?
2. Which are the conditional statements Explain .
3. Which are loops ? Differentiate .
4. what is membership operator explain with example.
5. what is string slicing ?
6. write a code to check whether the string is palidrome or not  
7. add float numbers from list and list items were added from user

dictionary --- 
key- value
methods  - values ,keys,items 

access dictionary with key 
add items in dictionary 



Lab task -- filtering 
Merge 2 dictionary 
dict1 = {1:"qwqwqw" , 2:"sdfsdf"}
dict2 = {4:"sdfdsfdsf",2:"sdfsdf"}

ans = {1:"qwqwqw" , 4:"sdfdsfdsf",2:"sdfsdf"}






	




 










 
















	






















